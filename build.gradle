// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: this.file('common.gradle')
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://jitpack.io"
        }
    }
}

//task clean(type: Delete) {
//    delete rootProject.buildDir
//}

/**
 * 配置阶段开始前的监听回调
 */
this.beforeEvaluate {
    println "配置阶段开始前的监听回调"
}
/**
 * 配置阶段完成以后的监听回调
 */
this.afterEvaluate {
    println "配置阶段完成以后的监听回调"

}
/**
 * gradle执行完毕的监听回调
 */
this.gradle.buildFinished {
    println "gradle执行完毕的监听回调"
}
this.gradle.beforeProject {}
this.gradle.afterProject {}
/**
 * project相关api
 */
def getProjects() {
    this.getSubprojects().eachWithIndex{ Project project, int index ->
        if(index==0) {
            println "Sub Project: '${project.name}'"
        } else {
            println "+----Project: '${project.name}'"
        }
    }
    //this.getRootProject().name
}

this.getProjects()
//build.gradle代码在project配置阶段执行
//project('app') {
//    apply plugin: 'com.android.application'
//
//    dependencies {
//
//    }
//    android {
//
//    }
//}
/**
 * 配置当前project和subproject的所有project
 */
//allprojects {
//    version '1.0.0-release'
//    group 'com.wj'
//}
/**
 * 不包含当前节点工程，只包括他的subproject
 */
//subprojects {Project project ->
//    if (project.plugins.hasPlugin('com.android.library')) {
//        apply from: ''
//    }
//}

//subprojects {
//    //定义扩展属性
//    ext {
//        libAndroidDesign='com.android.support:design:25.1.0'
//    }
//}

ext {
    libAndroidDesign='com.android.support:design:25.1.0'
}

//println getRootDir().absolutePath
//println getProjectDir().absolutePath
//println getBuildDir().absolutePath
println getContent('common.gradle')
def getContent(String path) {
    try{
        def file=file(path)//相对于当前的project工程进行查找
        return file.text
    }catch (GradleException e) {
        println "file is not found"
    }
    return null
}

//buildscript {ScriptHandler scriptHandler ->
//    //配置我们工程的仓库地址
//    scriptHandler.repositories {RepositoryHandler repositoryHandler ->
//        repositoryHandler.jcenter()
//        repositoryHandler.mavenCentral()
//        repositoryHandler.mavenLocal()
//       // repositoryHandler.ivy {}
//        repositoryHandler.maven {
//            name 'personal'//可以填公司名字
//            url ''//可以填企业私服地址
//            credentials {
//                username = ''
//                password = ''
//            }
//        }
//    }
//    //配置我们工程的“插件”依赖地址
//    scriptHandler.dependencies {//gradle本身对第三方的依赖
//       // classpath ''
//
//    }
//}
